load_module modules/ngx_http_js_module.so;

events {  }

env SECRET_KEY;

http {
    js_path "/etc/nginx/njs/";

    js_import main from http/authorization/auth_request.js;

    # This is where token introspection responses will be stored if proxy_cache is enabled
    proxy_cache_path /var/cache/nginx/tokens levels=1 keys_zone=token_responses:1m max_size=10m;


    map $http_authorization $access_token {
        "~*^bearer (.*)$" $1;
        default $http_authorization;
    }

    upstream backend {
        server 127.0.0.1:8081;
    }    

    server {
        server_name localhost
        listen 80;

        # OAuth 2.0 Token Introspection configuration
    resolver 127.0.0.11 valid=10s;
        resolver_timeout 5s; 
    subrequest_output_buffer_size 16k; # To fit a complete response from OAuth server
    error_log /var/log/nginx/error.log debug; # Enable to see introspection details

    #set $access_token $http_apikey; # Where to find the token. Remove when using Authorization header
    set $oauth_token_endpoint     "http://keycloak:8080/realms/smm-poc-approach/protocol/openid-connect/token/introspect";
    set $oauth_token_hint         "access_token"; # E.g. access_token, refresh_token
    set $oauth_client_id          "smmproxy"; # Will use HTTP Basic authentication unless empty
    set $oauth_client_secret      "Q6SXIpOyjMKdGoanzy1V622VkmUn1rp4"; # If id is empty this will be used as a bearer token


        location /api/ {
            if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        #
        # Om nom nom cookies
        #
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
     }
     if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
     }
     if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'authorization,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
     }
            auth_request /validate;
            add_header Access-Control-Allow-Origin *;

            proxy_pass http://backend;
        }

        location /validate {
            internal;
            js_content main.authorize;
        }

        location /_oauth2_send_introspection_request {
        # This location is called by introspectAccessToken(). We use the proxy_
        # directives to construct an OAuth 2.0 token introspection request, as per:
        #  https://tools.ietf.org/html/rfc7662#section-2
        
        gunzip on; # Decompress if necessary

        proxy_method      POST;
        proxy_set_header  Authorization $arg_authorization;
        proxy_set_header  Content-Type "application/x-www-form-urlencoded";
        proxy_set_body    "token=$arg_token&token_hint=$oauth_token_hint";
        proxy_pass        $oauth_token_endpoint;

        #proxy_cache           token_responses; # Enable caching of token introspection responses
        #proxy_cache_key       $access_token;   # Cache the response for each unique access token
        #proxy_cache_lock      on;              # Don't allow simultaneous requests for same token
        #proxy_cache_valid     200 10s;         # How long to use cached introspection responses
        #proxy_cache_use_stale error timeout;   # Use old responses if we cannot reach the server
        #proxy_ignore_headers  Cache-Control Expires Set-Cookie; # Cache even when receiving these
    }

    }

    server {
        listen 127.0.0.1:8081;
        return 200 '[{"id": 1, "name": "test1"},{"id": 2, "name": "test2"}]';
    }



}
